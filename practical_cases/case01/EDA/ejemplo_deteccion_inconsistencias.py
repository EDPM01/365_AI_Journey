"""
Ejemplo de Detecci√≥n de Inconsistencias en Datos
==============================================

Este script demuestra c√≥mo usar el detector de inconsistencias
integrado en la pipeline de limpieza de datos.
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import sys
from pathlib import Path

# Agregar el directorio actual al path
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

from data_cleaning_pipeline import DataCleaningPipeline
from inconsistency_detector import (
    InconsistencyDetector, 
    MEGAMERCADO_BUSINESS_RULES,
    precio_mayor_que_costo,
    edad_coherente,
    email_unico_por_cliente
)


def crear_datos_con_inconsistencias():
    """
    Crea datasets de ejemplo con inconsistencias intencionadas para demostrar la detecci√≥n.
    """
    # Dataset de clientes con inconsistencias
    clientes_data = {
        'id_cliente': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'nombre': ['Juan P√©rez', 'MAR√çA GONZ√ÅLEZ', 'pedro l√≥pez', '  Ana Silva  ', 'Luis RODR√çGUEZ', 
                  'Carmen Morales', 'Jos√© Garc√≠a', 'Laura Fern√°ndez', 'Miguel Torres', 'Sof√≠a Ruiz'],
        'email': ['juan@email.com', 'maria@gmail.com', 'pedro@invalid', 'ana@email.com', 'luis@email.com',
                 'carmen@email.com', 'jose@', 'laura@email.com', 'miguel@email.com', 'ana@email.com'],  # Email duplicado
        'edad': [25, 30, -5, 200, 28, 35, 22, 150, 40, 25],  # Edades negativas y muy altas
        'telefono': ['123-456-7890', '987654321', 'INVALID', '555-0123', '', 
                    '111-222-3333', '+1-555-0199', 'NO_PHONE', '444-555-6666', '777-888-9999'],
        'fecha_nacimiento': ['1998-01-15', '1993-05-20', '2030-12-01', '1800-01-01', '1995-03-10',  # Fecha futura y muy antigua
                           '1988-07-25', '2001-11-30', '1850-06-15', '1983-09-12', '1998-04-20'],
        'ciudad': ['Madrid', 'barcelona', 'VALENCIA', 'madrid', 'Sevilla',
                  'Bilbao', 'm√°laga', 'ZARAGOZA', 'Murcia', 'Palma']
    }
    
    # Dataset de productos con inconsistencias
    productos_data = {
        'id_producto': [101, 102, 103, 104, 105, 106, 107, 108, 109, 110],
        'nombre': ['Laptop Dell', 'mouse USB', 'TECLADO MEC√ÅNICO', '  Monitor 24"  ', 'Smartphone Samsung',
                  'Tablet Apple', 'auriculares bluetooth', 'WEBCAM HD', 'Impresora HP', 'Router WiFi'],
        'categoria': ['Electr√≥nicos', 'electronico', 'ELECTRONICO', 'Electr√≥nicos', 'Tel√©fonos',
                     'Tablets', 'Audio', 'video', 'IMPRESORAS', 'Redes'],
        'precio': [899.99, 25.50, 150.00, 299.99, 699.00, 499.99, 89.99, 75.00, 199.99, 129.99],
        'costo': [750.00, 15.00, 180.00, 200.00, 500.00, 400.00, 60.00, 90.00, 150.00, 100.00],  # Algunos costos > precio
        'stock': [50, 100, -5, 25, 75, 30, 200, -10, 40, 60],  # Stock negativo
        'marca': ['Dell', 'gen√©rica', 'CORSAIR', 'LG', 'Samsung', 'Apple', 'sony', 'LOGITECH', 'HP', 'TP-Link'],
        'id_proveedor': [1, 2, 3, 99, 5, 6, 7, 88, 9, 10]  # Proveedores que no existen
    }
    
    # Dataset de ventas con inconsistencias temporales
    base_date = datetime.now() - timedelta(days=365)
    ventas_data = {
        'id_venta': [1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010],
        'id_cliente': [1, 2, 99, 4, 5, 6, 88, 8, 9, 10],  # Clientes que no existen
        'id_producto': [101, 102, 103, 199, 105, 106, 107, 188, 109, 110],  # Productos que no existen
        'fecha_pedido': [(base_date + timedelta(days=i*30)).strftime('%Y-%m-%d') for i in range(10)],
        'fecha_entrega': [
            (base_date + timedelta(days=i*30 - 5)).strftime('%Y-%m-%d') if i in [2, 7] 
            else (base_date + timedelta(days=i*30 + 5)).strftime('%Y-%m-%d') 
            for i in range(10)  # Algunas entregas antes del pedido
        ],
        'cantidad': [1, 2, 0, 5, 1, 3, -2, 4, 1, 2],  # Cantidades negativas y cero
        'precio_unitario': [899.99, 25.50, 150.00, 299.99, 699.00, 499.99, 89.99, 75.00, 199.99, 129.99],
        'total': [899.99, 51.00, 0.00, 1499.95, 699.00, 1499.97, -179.98, 300.00, 199.99, 259.98],
        'estado': ['Entregado', 'pendiente', 'CANCELADO', 'Entregado', 'En tr√°nsito',
                  'entregado', 'PENDIENTE', 'Cancelado', 'EN_TRANSITO', 'Delivered']  # Inconsistencias de formato
    }
    
    # Dataset de proveedores
    proveedores_data = {
        'id_proveedor': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'nombre': ['TechSupply', 'ElectroWorld', 'GadgetCorp', 'DeviceHub', 'TechMart',
                  'ElectroSupply', 'GizmoStore', 'TechSource', 'DeviceWorld', 'GadgetSupply'],
        'contacto': ['Juan P√©rez', 'Mar√≠a L√≥pez', 'Carlos Garc√≠a', 'Ana Mart√≠n', 'Luis Silva',
                    'Carmen Ruiz', 'Jos√© Moreno', 'Laura Torres', 'Miguel D√≠az', 'Sof√≠a Vega'],
        'email': ['juan@techsupply.com', 'maria@invalid', 'carlos@gadgetcorp.com', '', 'luis@techmart.com',
                 'carmen@electro.com', 'jose@', 'laura@techsource.com', 'miguel@device.com', 'sofia@gadget.com'],
        'telefono': ['555-0101', 'INVALID', '555-0103', '555-0104', '',
                    '555-0106', '555-0107', '555-0108', '555-0109', '555-0110']
    }
    
    # Crear DataFrames
    datasets = {
        'clientes': pd.DataFrame(clientes_data),
        'productos': pd.DataFrame(productos_data),
        'ventas': pd.DataFrame(ventas_data),
        'proveedores': pd.DataFrame(proveedores_data)
    }
    
    return datasets


def ejemplo_deteccion_basica():
    """
    Ejemplo b√°sico de detecci√≥n de inconsistencias.
    """
    print("üîç EJEMPLO 1: DETECCI√ìN B√ÅSICA DE INCONSISTENCIAS")
    print("=" * 60)
    
    # Crear datos con inconsistencias
    datasets = crear_datos_con_inconsistencias()
    
    # Crear detector
    detector = InconsistencyDetector()
    
    # Ejecutar detecci√≥n en un dataset
    print("\nüìä Analizando dataset de clientes...")
    inconsistencies = detector.detect_format_inconsistencies(datasets['clientes'], 'clientes')
    inconsistencies.extend(detector.detect_range_inconsistencies(datasets['clientes'], 'clientes'))
    inconsistencies.extend(detector.detect_temporal_inconsistencies(datasets['clientes'], 'clientes'))
    
    print(f"‚úÖ Encontradas {len(inconsistencies)} inconsistencias en clientes")
    
    for inc in inconsistencies[:3]:  # Mostrar solo las primeras 3
        print(f"\nüö® {inc.type}")
        print(f"   Severidad: {inc.severity}")
        print(f"   Columna: {inc.column}")
        print(f"   Descripci√≥n: {inc.description}")
        print(f"   Casos: {inc.count}")
        print(f"   Ejemplos: {inc.examples[:3]}")
    
    return inconsistencies


def ejemplo_deteccion_completa():
    """
    Ejemplo de detecci√≥n completa con la pipeline integrada.
    """
    print("\nüîç EJEMPLO 2: DETECCI√ìN COMPLETA CON PIPELINE")
    print("=" * 60)
    
    # Crear datos con inconsistencias
    datasets = crear_datos_con_inconsistencias()
    
    # Guardar temporalmente los datos (simular archivos)
    temp_path = Path(__file__).parent / "temp_data"
    temp_path.mkdir(exist_ok=True)
    
    file_mapping = {}
    for name, df in datasets.items():
        file_path = temp_path / f"{name}.csv"
        df.to_csv(file_path, index=False)
        file_mapping[name] = f"temp_data/{name}.csv"
    
    try:
        # Crear pipeline con detecci√≥n de inconsistencias activada
        pipeline = DataCleaningPipeline(str(Path(__file__).parent))
        
        print("üîÑ Ejecutando pipeline con detecci√≥n de inconsistencias...")
        
        # Ejecutar pipeline completo con detecci√≥n
        clean_data = pipeline.run_complete_pipeline(
            file_mapping,
            detect_inconsistencies=True
        )
        
        # Mostrar resumen de inconsistencias
        if 'inconsistencies' in pipeline.cleaning_report:
            summary = pipeline.cleaning_report['inconsistencies']['summary']
            print(f"\nüìä RESUMEN DE INCONSISTENCIAS:")
            print(f"Total: {summary['total']}")
            
            for severity, count in summary['by_severity'].items():
                icon = {'CRITICAL': 'üî¥', 'HIGH': 'üü†', 'MEDIUM': 'üü°', 'LOW': 'üü¢'}.get(severity, '‚ö™')
                print(f"{icon} {severity}: {count}")
            
            print(f"\nüìã Por tabla:")
            for table, count in summary['by_table'].items():
                print(f"  {table}: {count}")
        
        return clean_data
        
    finally:
        # Limpiar archivos temporales
        import shutil
        if temp_path.exists():
            shutil.rmtree(temp_path)


def ejemplo_reglas_personalizadas():
    """
    Ejemplo de detecci√≥n con reglas de negocio personalizadas.
    """
    print("\nüîç EJEMPLO 3: REGLAS DE NEGOCIO PERSONALIZADAS")
    print("=" * 60)
    
    # Crear datos con inconsistencias
    datasets = crear_datos_con_inconsistencias()
    
    # Crear detector
    detector = InconsistencyDetector()
    
    # A√±adir reglas de negocio personalizadas
    detector.add_business_rule('productos', 'precio_vs_costo', precio_mayor_que_costo, 'HIGH')
    detector.add_business_rule('clientes', 'email_unico', email_unico_por_cliente, 'CRITICAL')
    
    # A√±adir referencias de integridad
    detector.add_reference_mapping('ventas', 'clientes', 'id_cliente', 'id_cliente')
    detector.add_reference_mapping('ventas', 'productos', 'id_producto', 'id_producto')
    detector.add_reference_mapping('productos', 'proveedores', 'id_proveedor', 'id_proveedor')
    
    print("‚úÖ Reglas de negocio y referencias configuradas")
    
    # Ejecutar detecci√≥n completa
    all_inconsistencies = detector.run_full_inconsistency_detection(datasets)
    
    print(f"\nüìä RESULTADOS POR TIPO DE INCONSISTENCIA:")
    
    # Agrupar por tipo
    by_type = {}
    for table_inconsistencies in all_inconsistencies.values():
        for inc in table_inconsistencies:
            if inc.type not in by_type:
                by_type[inc.type] = []
            by_type[inc.type].append(inc)
    
    for inc_type, incidents in by_type.items():
        print(f"\nüö® {inc_type}: {len(incidents)} casos")
        
        # Mostrar ejemplo m√°s cr√≠tico
        critical_incident = min(incidents, key=lambda x: {'CRITICAL': 0, 'HIGH': 1, 'MEDIUM': 2, 'LOW': 3}[x.severity])
        print(f"   M√°s cr√≠tico: {critical_incident.table}.{critical_incident.column}")
        print(f"   Descripci√≥n: {critical_incident.description}")
        print(f"   Acci√≥n: {critical_incident.suggested_action}")
    
    # Generar reporte completo
    print("\nüìÑ Generando reporte completo...")
    report = detector.generate_inconsistency_report()
    
    # Guardar reporte
    report_path = Path(__file__).parent / "inconsistencies_example_report.txt"
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"üìÅ Reporte guardado en: {report_path}")
    
    return all_inconsistencies


def ejemplo_validacion_continua():
    """
    Ejemplo de c√≥mo usar la detecci√≥n de inconsistencias para validaci√≥n continua.
    """
    print("\nüîç EJEMPLO 4: VALIDACI√ìN CONTINUA DE CALIDAD")
    print("=" * 60)
    
    # Simular datasets que llegan peri√≥dicamente
    datasets_scenarios = [
        {
            'name': 'Datos Buenos',
            'data': {
                'clientes': pd.DataFrame({
                    'id_cliente': [1, 2, 3],
                    'nombre': ['Juan P√©rez', 'Mar√≠a Gonz√°lez', 'Carlos L√≥pez'],
                    'email': ['juan@email.com', 'maria@email.com', 'carlos@email.com'],
                    'edad': [25, 30, 35]
                })
            }
        },
        {
            'name': 'Datos con Problemas Menores',
            'data': {
                'clientes': pd.DataFrame({
                    'id_cliente': [1, 2, 3],
                    'nombre': ['juan p√©rez', 'MAR√çA GONZ√ÅLEZ', '  carlos l√≥pez  '],  # Formato inconsistente
                    'email': ['juan@email.com', 'maria@email.com', 'carlos@email.com'],
                    'edad': [25, 30, 35]
                })
            }
        },
        {
            'name': 'Datos con Problemas Cr√≠ticos',
            'data': {
                'clientes': pd.DataFrame({
                    'id_cliente': [1, 2, 3],
                    'nombre': ['Juan P√©rez', 'Mar√≠a Gonz√°lez', 'Carlos L√≥pez'],
                    'email': ['juan@email.com', 'maria@email.com', 'juan@email.com'],  # Email duplicado
                    'edad': [25, 200, -5]  # Edades inv√°lidas
                })
            }
        }
    ]
    
    # Configurar detector
    detector = InconsistencyDetector()
    detector.add_business_rule('clientes', 'email_unico', email_unico_por_cliente, 'CRITICAL')
    
    print("üìä VALIDANDO CALIDAD DE DATOS POR LOTES:")
    
    results = []
    
    for scenario in datasets_scenarios:
        print(f"\nüîÑ Procesando: {scenario['name']}")
        
        # Detectar inconsistencias
        inconsistencies = detector.run_full_inconsistency_detection(scenario['data'])
        summary = detector.get_inconsistencies_summary()
        
        # Evaluar calidad
        total_inconsistencies = summary['total']
        critical_count = summary['by_severity'].get('CRITICAL', 0)
        high_count = summary['by_severity'].get('HIGH', 0)
        
        # Determinar estado de calidad
        if critical_count > 0:
            status = "üî¥ RECHAZADO - Problemas cr√≠ticos"
            action = "Rechazar lote y notificar al equipo de datos"
        elif high_count > 5:
            status = "üü† REVISI√ìN - Muchos problemas de alta prioridad"
            action = "Revisar manualmente antes de procesar"
        elif total_inconsistencies > 0:
            status = "üü° ACEPTADO CON OBSERVACIONES - Problemas menores"
            action = "Procesar con limpieza autom√°tica"
        else:
            status = "üü¢ ACEPTADO - Calidad excelente"
            action = "Procesar normalmente"
        
        print(f"   Estado: {status}")
        print(f"   Inconsistencias: {total_inconsistencies}")
        print(f"   Acci√≥n: {action}")
        
        results.append({
            'scenario': scenario['name'],
            'total_inconsistencies': total_inconsistencies,
            'critical': critical_count,
            'high': high_count,
            'status': status,
            'action': action
        })
    
    print(f"\nüìã RESUMEN DE VALIDACI√ìN:")
    print("=" * 50)
    for result in results:
        print(f"{result['scenario']}: {result['total_inconsistencies']} inconsistencias")
        print(f"  Cr√≠ticas: {result['critical']}, Altas: {result['high']}")
        print(f"  Acci√≥n: {result['action']}")
        print()
    
    return results


def main():
    """
    Ejecuta todos los ejemplos de detecci√≥n de inconsistencias.
    """
    print("üö® EJEMPLOS DE DETECCI√ìN DE INCONSISTENCIAS EN DATOS")
    print("=" * 70)
    print("Este script demuestra las capacidades avanzadas de detecci√≥n")
    print("de inconsistencias integradas en la pipeline de limpieza.\n")
    
    try:
        # Ejemplo 1: Detecci√≥n b√°sica
        ejemplo_deteccion_basica()
        
        # Ejemplo 2: Detecci√≥n integrada en pipeline
        ejemplo_deteccion_completa()
        
        # Ejemplo 3: Reglas personalizadas
        ejemplo_reglas_personalizadas()
        
        # Ejemplo 4: Validaci√≥n continua
        ejemplo_validacion_continua()
        
        print("\nüéâ TODOS LOS EJEMPLOS COMPLETADOS EXITOSAMENTE")
        print("=" * 50)
        
        print("\nüí° CONCLUSIONES:")
        print("‚Ä¢ La pipeline puede detectar m√∫ltiples tipos de inconsistencias")
        print("‚Ä¢ Las reglas de negocio son personalizables por dominio")
        print("‚Ä¢ La detecci√≥n se integra perfectamente con la limpieza")
        print("‚Ä¢ Los reportes proporcionan acciones claras para remediar problemas")
        print("‚Ä¢ La validaci√≥n continua permite control de calidad automatizado")
        
    except Exception as e:
        print(f"\n‚ùå Error ejecutando ejemplos: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()